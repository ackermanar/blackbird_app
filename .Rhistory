ui <- fluidPage(
titlePanel("Blackbird Image Lookup"),
sidebarLayout(
sidebarPanel(
h3("Select the directory that contains the corresponding set of images."),
p('e.g. "2020-11-17_15-00-00"'),
shinyDirButton("folder", "Select the image folder",
"Please select image folder", multiple = FALSE),
br(),
br(),
fileInput("file", "Choose result file, e.g. 'Result .xlsx.'",
accept = ".xlsx"),
imageOutput("image")
),
mainPanel(
DTOutput("tbl"),
verbatimTextOutput("text"),
)
)
)
server <- function(input, output, clientData, session) { # nolint
shinyDirChoose(input, "folder", roots = c("home" = "~"), session = session, filetypes = NULL)
observe({
file <- input$file
folder <- input$folder
req(file)
req(folder)
df <- read.xlsx(xlsxFile = file$datapath, colNames = TRUE, rowNames = TRUE,
detectDates = TRUE, skipEmptyRows = TRUE, na.strings = "N/A") # nolint: line_length_linter.
# Find the directory path
dir_path <- parseDirPath(c("home" = "~"), folder)
# Find string that starts with "T" followed by a number
tray <- sub(".*T(\\d+).*", "\\1", parseDirPath(c("home" = "~"), folder)) # nolint: line_length_linter.
# Render tbl
output$tbl <- renderDT(df, server = TRUE,
selection = list(mode = "single", target = "cell"))
output$text <- renderPrint({
validate(
need(sub(" Results.xlsx", "", file$name) == basename(dir_path), "Image file and result file do not match") # nolint: line_length_linter.
)
paste(
dir_path, # nolint: line_length_linter.
colnames(df)[input$tbl_cell_clicked$col],
tray,
paste0(rownames(df)[input$tbl_cell_clicked$row], ".png"), # nolint: line_length_linter.
sep = .Platform$file.sep)
})
# Render image
output$image <- renderImage({
width  <- clientData$output_image_width
height <- clientData$output_image_height
list(src = paste(dir_path,
colnames(df)[input$tbl_cell_clicked$col],
tray,
paste0(rownames(df)[input$tbl_cell_clicked$row], ".png"), # nolint: line_length_linter.
sep = .Platform$file.sep), contentType = "image/png", width = width, height = height) # nolint: line_length_linter.
}, deleteFile = FALSE)
}) %>%
bindEvent(c(input$file, input$folder))
}
### Quick lookup of blackbird output images for qucik validation ###
# Wrote by A.J. Ackerman, November 17th, 2023.
# contact: aja294@cornell.edu
library(shiny)
library(DT)
library(openxlsx)
library(data.table)
library(shinyFiles)
ui <- fluidPage(
titlePanel("Blackbird Image Lookup"),
sidebarLayout(
sidebarPanel(
h3("Select the directory that contains the corresponding set of images."),
p('e.g. "2020-11-17_15-00-00"'),
shinyDirButton("folder", "Select the image folder",
"Please select image folder", multiple = FALSE),
br(),
br(),
fileInput("file", "Choose result file, e.g. 'Result .xlsx.'",
accept = ".xlsx"),
imageOutput("image")
),
mainPanel(
DTOutput("tbl"),
verbatimTextOutput("text"),
)
)
)
server <- function(input, output, clientData, session) { # nolint
shinyDirChoose(input, "folder", roots = c("home" = "~"), session = session, filetypes = NULL)
observe({
file <- input$file
folder <- input$folder
req(file)
req(folder)
df <- read.xlsx(xlsxFile = file$datapath, colNames = TRUE, rowNames = TRUE,
detectDates = TRUE, skipEmptyRows = TRUE, na.strings = "N/A") # nolint: line_length_linter.
# Find the directory path
dir_path <- parseDirPath(c("home" = "~"), folder)
# Find string that starts with "T" followed by a number
tray <- sub(".*T(\\d+).*", "\\1", parseDirPath(c("home" = "~"), folder)) # nolint: line_length_linter.
# Render tbl
output$tbl <- renderDT(df, server = TRUE,
selection = list(mode = "single", target = "cell"))
output$text <- renderPrint({
validate(
need(sub(" Results.xlsx", "", file$name) == basename(dir_path), "Image file and result file do not match") # nolint: line_length_linter.
)
paste(
dir_path, # nolint: line_length_linter.
colnames(df)[input$tbl_cell_clicked$col],
tray,
paste0(rownames(df)[input$tbl_cell_clicked$row], ".png"), # nolint: line_length_linter.
sep = .Platform$file.sep)
})
# Render image
output$image <- renderImage({
width  <- clientData$output_image_width
height <- clientData$output_image_height
list(src = paste(dir_path,
colnames(df)[input$tbl_cell_clicked$col],
tray,
paste0(rownames(df)[input$tbl_cell_clicked$row], ".png"), # nolint: line_length_linter.
sep = .Platform$file.sep), contentType = "image/png", width = width, height = height) # nolint: line_length_linter.
}, deleteFile = FALSE)
}) %>%
bindEvent(c(input$file, input$folder))
}
shinyApp(ui, server)
